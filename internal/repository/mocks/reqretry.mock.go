// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/reqretry.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repository/reqretry.go -package=repomocks -destination=./internal/repository/mocks/reqretry.mock.go ReqRetryRepository
//
// Package repomocks is a generated GoMock package.
package repomocks

import (
	context "context"
	reflect "reflect"
	domain "webook/internal/domain"

	gomock "go.uber.org/mock/gomock"
)

// MockReqRetryRepository is a mock of ReqRetryRepository interface.
type MockReqRetryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockReqRetryRepositoryMockRecorder
}

// MockReqRetryRepositoryMockRecorder is the mock recorder for MockReqRetryRepository.
type MockReqRetryRepositoryMockRecorder struct {
	mock *MockReqRetryRepository
}

// NewMockReqRetryRepository creates a new mock instance.
func NewMockReqRetryRepository(ctrl *gomock.Controller) *MockReqRetryRepository {
	mock := &MockReqRetryRepository{ctrl: ctrl}
	mock.recorder = &MockReqRetryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReqRetryRepository) EXPECT() *MockReqRetryRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockReqRetryRepository) Create(ctx context.Context, r domain.ReqRetry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockReqRetryRepositoryMockRecorder) Create(ctx, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockReqRetryRepository)(nil).Create), ctx, r)
}

// Delete mocks base method.
func (m *MockReqRetryRepository) Delete(ctx context.Context, Id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, Id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockReqRetryRepositoryMockRecorder) Delete(ctx, Id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockReqRetryRepository)(nil).Delete), ctx, Id)
}

// FindById mocks base method.
func (m *MockReqRetryRepository) FindById(ctx context.Context, Id string) (domain.ReqRetry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, Id)
	ret0, _ := ret[0].(domain.ReqRetry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockReqRetryRepositoryMockRecorder) FindById(ctx, Id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockReqRetryRepository)(nil).FindById), ctx, Id)
}

// Update mocks base method.
func (m *MockReqRetryRepository) Update(ctx context.Context, r domain.ReqRetry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockReqRetryRepositoryMockRecorder) Update(ctx, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockReqRetryRepository)(nil).Update), ctx, r)
}
